- hosts: localhost
  connection: local
  gather_facts: yes
  vars_files:
     vars.yml
  tasks:
    - name: "Creating Ssh KeyPair"
      ec2_key:
          aws_access_key: "{{ aws_access_key }}"
          aws_secret_key: "{{ aws_secret_key }}"
          region: "{{ region }}"
          name: "{{ keypair_name }}"
          state: present
      register: keypair_content
          
    - name: "Saving Private Key Content"
      when: keypair_content.changed == true
      copy:
        content: "{{ keypair_content.key.private_key }}"
        dest: "{{ keypair_name }}.pem"
        mode: 0400

  #######CREATE VPC ###########   
    - name: "VPC setup"
      ec2_vpc_net:
        name: "{{ vpc_name }}"
        cidr_block: "{{ cidr_vpc }}"
        region: "{{ region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        state: present
      register: vpc


    - name: Set VPC ID in variable
      set_fact:
        vpc_id: "{{ vpc.vpc.id }}"

  ######################Subnet Setup#######################

    - name: Create Public Subnet A
      ec2_vpc_subnet:
        vpc_id: "{{ vpc_id }}"
        region: "{{ region }}"
        cidr: "{{ public_subnetA_cidr }}"
        az: "{{ region }}a"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        map_public: yes
        state: present
        tags:
          Name: "Webserver_subnet"
      register: web_subnet

    - name: Create Private Subnet B
      ec2_vpc_subnet:
        vpc_id: "{{ vpc_id }}"
        region: "{{ region }}"
        cidr: "{{ private_subnetC_cidr }}"
        az: "{{ region }}c"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        state: present
        tags:
          Name: "private_subnet"
      register: private_subnet

  ######################Internet Gateway Setup#######################

    - name: Create IGW
      ec2_vpc_igw: 
        vpc_id: "{{ vpc_id }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ region }}"
        state: present
        tags:
          Name: "{{ igw_name }}"
      register: igw

    - name: Set route table for Public Subnets
      ec2_vpc_route_table:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ region }}"
        state: present
        vpc_id: "{{ vpc_id }}"
  #changed_subnet
        subnets: 
          - "{{ web_subnet.subnet.id }}"      
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
  ######################time out#######################
    - name: Wait for 15 Seconds
      wait_for: timeout=5
  ######################Nat Gateway Setup#######################
    - name: Create Nat Gateway in webserver Subnet
      ec2_vpc_nat_gateway:
        subnet_id: "{{ web_subnet.subnet.id }}"
        state: present
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ region }}"
      register: nat_gw
  ######################time out#######################
    - name: Wait for 10 Seconds
      wait_for: timeout=10

    - name: Set Private Subnet C Route Table
      ec2_vpc_route_table:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ region }}"
        state: present
        vpc_id: "{{ vpc_id }}"
        subnets:
          - "{{ private_subnet.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ nat_gw.nat_gateway_id }}"
  ######################time out#######################
    - name: Wait for 5 Seconds
      wait_for: timeout=5

  ######################Security group creation for WebServe#######################

    - name: Creating Webserver Security Group
      ec2_group:
        name:  "Webserver-sg"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        description: "Webserver-sg"
        vpc_id: "{{ vpc_id }}"
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
      register: webserver_sg
  ######################Security group creation for Private server#######################

    - name: Creating Database Server Security Group
      ec2_group:
        name: "DB-Server-sg"
        description: "DataBase Server-sg"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        vpc_id: "{{ vpc_id }}"
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            group_id: "{{ webserver_sg.group_id }}"
          - proto: "tcp"
            from_port: 80
            to_port: 80
            group_id: "{{ webserver_sg.group_id }}"
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0

  ######################Launching Web Server#######################
    - name: "Launching Web Server"
      ec2:
        
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ region }}"
        key_name: "{{ keypair_name }}"
        instance_type: "{{ instance_type }}"
        image: "{{ image_id }}"
        group: Webserver-sg
        vpc_subnet_id: "{{ web_subnet.subnet.id }}"
        instance_tags:
          Name: "webserver"
        count_tag:
          Name: "webserver"
        exact_count: 1
        wait: true

    - name: Wait for 5 Seconds
      wait_for: timeout=15        
    
    - name: "Fetching Ec2 Instance Details"
      ec2_instance_info:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ region }}"
        filters:
          vpc-id: "{{ vpc_id }}"
          instance-state-name: [ "running"]
      register: ec2_status

    - name: "debug "
      debug:
        var: ec2_status
            
  ###########Creating Dynamic Inventory for webserver###############
    - name: "Creating Dynamic Inventory"
      add_host:
        name: "{{ item.public_ip_address }}"
        groups: "hwebserver"
        ansible_host: "{{ item.public_ip_address }}"
        ansible_port: 22
        ansible_user: "ec2-user"
        ansible_ssh_private_key_file: "{{ keypair_name }}.pem"
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
      with_items: "{{ ec2_status.instances }}"
      
  ######Launching private subnet ec2 ####

    - name: Launching private Server in the VPC
      ec2:
        key_name: "{{ keypair_name }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ region }}"
        instance_type: "{{ instance_type }}"
        image: "{{ image_id }}"
        group: DB-Server-sg
        vpc_subnet_id: "{{ private_subnet.subnet.id }}"
        user_data: "{{ userdata }}"
        assign_public_ip: no
        wait: true
        user_data: "{{ userdata }}"
        count_tag:
          Name: "DatabaseServer"
        instance_tags:
          Name: "DatabaseServer"
        exact_count: "{{ exact_count }}"
  #   register: ec2_status 


##vpc ec2 setups###
- name: "Installing Apache Webserver"
  become: true
  hosts: hwebserver
  tasks:
  
    - name: "Installing Apache Webserver"
      yum:
        name: httpd
        state: present
            
            
    - name: "Creating index.html"
      copy:
        content: "<center><h1>{{ ansible_fqdn }} </h1></center>"
        dest: /var/www/html/index.html
            
    - name: "Restarting/Enabling httpd"
      service:
        name: httpd
        state: restarted
        enabled: true
